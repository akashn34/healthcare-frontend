import { Component, OnInit } from '@angular/core';
import { Product } from '../product';
import { ProductService } from '../product.service';
import { Router } from '@angular/router';
import { OrdersService } from '../orders.service';
import { Orders } from '../orders';
import { OrderInfo } from '../order-info';

@Component({
  selector: 'app-customer-product-operation',
  templateUrl: './customer-product-operation.component.html',
  styleUrls: ['./customer-product-operation.component.css']
})
export class CustomerProductOperationComponent implements OnInit {
  cart:Array<any>=[];
  products:Array<Product>=[];
  flag:Boolean = true;
    msg:string ="";
    constructor(public ps:ProductService,public os:OrdersService,public router:Router) {}    //DI for  product Service
    
    ngOnInit(): void {
      const email = sessionStorage.getItem('email');  // Check session storage
      if (!email) {
        this.router.navigate(['login']);  // Redirect to login if no session found
      } else {
        this.loadProductInfo();
      }
    }
    loadProductInfo(): void {
      this.ps.findAll().subscribe({
        next:(result: any) => {
          this.products = result;
        },
        error:(error:any)=> {
          console.error(error);
        },
        complete:()=> {
  
        }
      })
    }
  
   /* logout(): void {
      sessionStorage.removeItem('email');  // Clear session
      this.router.navigate(['login']);     // Redirect to login
    }*/
  
  
    storeInCart(product:any): void {
      let result = this.cart.find(c => c.pid == product.pid);
      if(result == undefined){
        product.qty = 1;
        this.cart.push(product);
        this.msg = `${product.pname} added to cart.`;
      } else {
        this.msg = `${product.pname} is already in the cart.`;
      }
  
    }

    viewCart(): void {
      this.flag=false;
    }

    increment(index:any): void {
      this.cart[index].qty=this.cart[index].qty+1
      }

    decrement(index:any): void {
      if(this.cart[index].qty>1){
      this.cart[index].qty=this.cart[index].qty-1
      }
      }

    remove(index:any): void {
      this.cart.splice(index,1)
    }
    
    calculateTotal(): number {
      return this.cart.reduce((sum, item) => sum + item.qty * item.price, 0);
    }

    viewProducts(): void {
      this.flag = true;
    }

    clearCart(): void {
      this.cart = [];  // Empty the cart array
      this.msg = 'Cart has been cleared.';
    }

    sortProductsByPrice(order: string): void {
      if (order === 'asc') {
        this.products.sort((a, b) => a.price - b.price);
      } else {
        this.products.sort((a, b) => b.price - a.price);
      }
      this.msg = `Products sorted by price (${order === 'asc' ? 'Low to High' : 'High to Low'}).`;
    }

    searchProducts(searchTerm: string): void {
      if (searchTerm) {
        this.products = this.products.filter(product => 
          product.pname.toLowerCase().includes(searchTerm.toLowerCase())
        );
        this.msg = `Showing results for "${searchTerm}".`;
      } else {
        this.loadProductInfo();  // Reload all products if search is empty
        this.msg = '';
      }
    }

    saveCart(): void {
      localStorage.setItem('cart', JSON.stringify(this.cart));
      this.msg = 'Cart saved!';
    }
    
    loadCart(): void {
      const savedCart = localStorage.getItem('cart');
      if (savedCart) {
        this.cart = JSON.parse(savedCart);
        this.msg = 'Cart loaded from saved data.';
      }
    }

    placeOrder(): void {
      const emailid = sessionStorage.getItem('email');  
      if (!emailid) {
        this.msg = 'Please log in to place an order.';
        return;
      }
    
      // Create an order object, where orderInfoId and oid are null because they will be generated by the backend
      const order = new Orders(
        null, // `oid` is null because it's auto-generated in the backend
        emailid,
        this.calculateTotal(),
        'Pending',
        new Date().toISOString(),
        this.cart.map(item => new OrderInfo(
          null, // OrderInfo ID should be null for a new entry
          null, // oid will be assigned by backend
          item.pid,
          item.qty,
          item.price,
        ))
      );
    
      // Call backend to place the order
      console.log('order payload:', JSON.stringify(order));
      this.os.placeOrder(order).subscribe({
        next: () => {
          sessionStorage.setItem('OrderMessage', 'Order placed successfully');
          this.cart = []; // Clear the cart
          this.router.navigate(['/customer/orders']);
        },
        error: (error: any) => {
          sessionStorage.setItem('orderMessage', 'Failed to place order');
          console.error(error);
        }
      });
    }
    
    
    
    
}
